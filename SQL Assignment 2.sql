##ADVANCE JOINS AND GROUP BY
-- Question 13:
-- Display the top 5 rented movies along with the number of times they've been rented.
-- Hint: JOIN film, inventory, and rental tables, then use COUNT () and GROUP BY, and limit the results.
select *from rental;
SELECT 
    film.title, COUNT(rental.rental_id) AS rental_count
FROM
    film
        JOIN
    inventory ON film.film_id = inventory.film_id
        JOIN
    rental ON rental.inventory_id = inventory.inventory_id
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 5;

-- Question 14:
-- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.
select *from customer;
select 
customer.customer_id,
concat(customer.first_name,customer.last_name) as customer_name
from customer join rental
on rental.customer_id = customer.customer_id
join inventory on inventory.inventory_id = rental.inventory_id
group by customer.customer_id, customer_name
having 
    count(distinct inventory.store_id) = 2;

-- Windows Function:

-- 1. Rank the customers based on the total amount they've spent on rentals.

select 
concat(customer.first_name,customer.last_name) as customer_name,
sum(payment.amount) as total_amount,
rank() over(order by sum(payment.amount)desc) as customer_rank
from payment join customer 
on payment.customer_id = customer.customer_id
group by customer_name;

-- 2. Calculate the cumulative revenue generated by each film over time.

select 
film.title ,
film.film_id,
sum(payment.amount) over (partition by film.film_id order by rental.rental_date) as cumulative_revenue
from film join inventory
on film.film_id = inventory.film_id
join rental on rental.inventory_id = inventory.inventory_id
join payment on payment.rental_id = rental.rental_id
order by film.title, rental.rental_date;

-- 3. Determine the average rental duration for each film, considering films with similar lengths
select 
film.title,
film.length,
avg(datediff(rental.return_date,rental.rental_date)) as avg_rental_duration
from film join inventory
on film.film_id = inventory.film_id
join rental on rental.inventory_id = inventory.inventory_id
join payment on payment.rental_id = rental.rental_id
group by 
film.title,
film.length
order by 
film.title,
film.length;

-- 4. Identify the top 3 films in each category based on their rental counts.

select 
film.title,
category.name,
count(rental.rental_id) as rental_count,
rank() over(partition by category.category_id order by count(rental.rental_id)desc) as rank_in_category
FROM 
    film 
JOIN 
    film_category  ON film.film_id = film_category.film_id
JOIN 
    category  ON film_category.category_id = category.category_id
JOIN 
    inventory ON film.film_id = inventory.film_id
JOIN 
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY 
    category.category_id, category.name, film.film_id, film.title
ORDER BY 
    category.name, rank_in_category ;

-- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals
-- across all customers.
select 
customer.customer_id,
concat(customer.first_name,customer.last_name) as customer_name,
count(rental.rental_id) as total_rentals,
round(avg(count(rental.rental_id)) over (), 2) as avg_rentals,
count(rental.rental_id) - avg(count(rental.rental_id)) over () as rental_difference
from rental join customer
on rental.customer_id = customer.customer_id
group by customer.customer_id,customer_name;

-- 6. Find the monthly revenue trend for the entire rental store over time.

select 
date_format(rental.rental_date, '%Y-%m') as month,
sum(payment.amount) as total_revenue 
from payment join rental on rental.rental_id = payment.rental_id
group by month 
order by month ;

-- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.

WITH ranked_customers AS (
    SELECT 
        customer.customer_id,
        CONCAT(customer.first_name, " ", customer.last_name) AS customer_name,
        PERCENT_RANK() OVER (ORDER BY SUM(payment.amount) DESC) * 100 AS rank_,
        SUM(payment.amount) AS total_spending
    FROM 
        payment 
    JOIN 
        customer 
    ON 
        payment.customer_id = customer.customer_id
    GROUP BY 
        customer.customer_id, customer_name
)
SELECT 
    customer_id, 
    customer_name, 
    rank_, 
    total_spending
FROM 
    ranked_customers
WHERE 
    rank_ <= 20
ORDER BY 
    total_spending DESC;
    
-- 8. Calculate the running total of rentals per category, ordered by rental count.
SELECT 
    c.name AS category_name,
    COUNT(r.rental_id) AS rental_count,
    SUM(COUNT(r.rental_id)) OVER (ORDER BY COUNT(r.rental_id) DESC) AS running_total
FROM 
    category c
JOIN 
    film_category fc ON c.category_id = fc.category_id
JOIN 
    inventory i ON fc.film_id = i.film_id
JOIN 
    rental r ON i.inventory_id = r.inventory_id
GROUP BY 
    c.name
ORDER BY 
    rental_count DESC;

-- 9. Find the films that have been rented less than the average rental count for their respective categories.

WITH CategoryAverage AS (
    SELECT 
        c.category_id,
        c.name AS category_name,
        AVG(film_rentals.rental_count) AS avg_rental_count
    FROM 
        category c
    JOIN 
        film_category fc ON c.category_id = fc.category_id
    JOIN 
        (SELECT 
            f.film_id,
            COUNT(r.rental_id) AS rental_count
         FROM 
            film f
         LEFT JOIN 
            inventory i ON f.film_id = i.film_id
         LEFT JOIN 
            rental r ON i.inventory_id = r.inventory_id
         GROUP BY 
            f.film_id
        ) AS film_rentals ON fc.film_id = film_rentals.film_id
    GROUP BY 
        c.category_id, c.name
),
FilmRentals AS (
    SELECT 
        f.film_id,
        f.title,
        fc.category_id,
        COUNT(r.rental_id) AS rental_count
    FROM 
        film f
    JOIN 
        film_category fc ON f.film_id = fc.film_id
    LEFT JOIN 
        inventory i ON f.film_id = i.film_id
    LEFT JOIN 
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id, f.title, fc.category_id
)
SELECT 
    fr.film_id,
    fr.title,
    ca.category_name,
    fr.rental_count,
    ca.avg_rental_count
FROM 
    FilmRentals fr
JOIN 
    CategoryAverage ca ON fr.category_id = ca.category_id
WHERE 
    fr.rental_count < ca.avg_rental_count
ORDER BY 
    ca.category_name, fr.title;

-- 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.

select 
date_format(payment.payment_date, '%Y-%m') as payment_month,
sum(payment.amount) as revenue
from payment
group by payment_month
order by revenue desc
limit 5;